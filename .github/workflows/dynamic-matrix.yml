name: Dynamic Matrix

on:
  workflow_dispatch:
    inputs:
      os:
        description: Operating Systems
        type: string
        required: true
        default: ubuntu-latest, windows-latest
      node-version:
        description: Node Version
        type: string
        required: true
        default: 13, 14, 15



jobs:
    prepare-matrix:
      runs-on: ubuntu-latest
      steps:
        - name: Set up OS outputs
          id: os-split
          run: echo "step-output=value" >> $GITHUB_OUTPUT
        - name: Set up node-version outputs
          id: node-version-split
          run: echo "step-output=value 2" >> $GITHUB_OUTPUT
        - name: Use Output
          run: |-
            echo '${{steps.os-split.outputs.step-output}}'
            echo '${{steps.node-version-split.outputs.step-output}}'
        - name: Convert string to array
          id: array
          uses: actions/github-script@v6
          with:
            script: |
              let osString = context.payload.inputs["os"].replace(" ", "")
              let nodeVersionString = context.payload.inputs["node-version"].replace(" ", "")
              
              let osArray = osString.split(",") 
              let nodeVersionArray = nodeVersionString.split(",") 

              return {
                os: osArray,
                nodeVersion: nodeVersionArray
              }
        - run: | 
            echo os: ${{steps.array.outputs.result.os}}
            echo node-version: ${{steps.array.outputs.result.nodeVersion}}

      outputs:
        os: ${{ steps.array.outputs.result.os }}
        node-version: ${{ steps.array.outputs.result.nodeVersion }}
    node-matrix:
      needs: prepare-matrix
      strategy:
          matrix:
              node-version: ${{ needs.prepare-matrix.outputs.node-version }}
              os: ${{ needs.prepare-matrix.outputs.os }}
      runs-on: ${{ matrix.os }}
      steps:
          - run: node -v
          - uses: actions/setup-node@v3
            with:
              node-version: ${{ matrix.node-version }}
          - run: node -v
          - name: Log all matrix
            run: echo '${{ toJson(matrix) }}'